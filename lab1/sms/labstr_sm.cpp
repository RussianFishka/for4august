//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : labstr.sm
//

#include "labstr.h"
#include "labstr_sm.h"

using namespace statemap;

// Static class declarations.
Map1_Start Map1::Start("Map1::Start", 0);
Map1_Parsing Map1::Parsing("Map1::Parsing", 1);
Map1_Message Map1::Message("Map1::Message", 2);
Map1_Unacceptable Map1::Unacceptable("Map1::Unacceptable", 3);

void LabstrState::Digit(labstrContext& context, char pdigit)
{
    Default(context);
}

void LabstrState::EOS(labstrContext& context)
{
    Default(context);
}

void LabstrState::Letter(labstrContext& context, char symb)
{
    Default(context);
}

void LabstrState::PunctMark(labstrContext& context, char symb)
{
    Default(context);
}

void LabstrState::SpaceOrTab(labstrContext& context)
{
    Default(context);
}

void LabstrState::Unknown(labstrContext& context)
{
    Default(context);
}

void LabstrState::Default(labstrContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void Map1_Start::Digit(labstrContext& context, char pdigit)
{

    context.getState().Exit(context);
    context.setState(Map1::Unacceptable);
    context.getState().Entry(context);

}

void Map1_Start::EOS(labstrContext& context)
{
    Labstr& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        ctxt.cleanbuf();
        ctxt.setsmsflagzero();
        ctxt.setCount(0);
        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Start::Letter(labstrContext& context, char symb)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.getCount() < 3)
    {
        LabstrState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addsymbbuf(symb);
            ctxt.setCount(ctxt.getCount() + 1);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Unacceptable);
        context.getState().Entry(context);
    }

}

void Map1_Start::PunctMark(labstrContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::Unacceptable);
    context.getState().Entry(context);

}

void Map1_Start::SpaceOrTab(labstrContext& context)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.getCount() == 3 && ctxt.isTelorFax())
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.cleanbuf();
            ctxt.setCount(0);
            context.setState(Map1::Parsing);
        }
        catch (...)
        {
            context.setState(Map1::Parsing);
            throw;
        }
        context.getState().Entry(context);
    }
    else if (ctxt.getCount() == 3 && ctxt.isSms())

    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.cleanbuf();
            ctxt.setCount(0);
            context.setState(Map1::Parsing);
        }
        catch (...)
        {
            context.setState(Map1::Parsing);
            throw;
        }
        context.getState().Entry(context);
    }    else
    {
         Map1_Default::SpaceOrTab(context);
    }

}

void Map1_Start::Unknown(labstrContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Unacceptable);
    context.getState().Entry(context);

}

void Map1_Parsing::Digit(labstrContext& context, char pdigit)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.getCount() > 0 && ctxt.getCount() < 12)
    {
        LabstrState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addsymbbuf(pdigit);
            ctxt.setCount(ctxt.getCount() + 1);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Unacceptable);
        context.getState().Entry(context);
    }

}

void Map1_Parsing::EOS(labstrContext& context)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.getCount() == 12)
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.addnum();
            ctxt.Acceptable();
            ctxt.cleanbuf();
            ctxt.setsmsflagzero();
            ctxt.setCount(0);
            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.cleanbuf();
            ctxt.setsmsflagzero();
            ctxt.setCount(0);
            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }

}

void Map1_Parsing::Letter(labstrContext& context, char symb)
{

    context.getState().Exit(context);
    context.setState(Map1::Unacceptable);
    context.getState().Entry(context);

}

void Map1_Parsing::PunctMark(labstrContext& context, char symb)
{
    Labstr& ctxt = context.getOwner();

    if ((ctxt.getCount() == 0 || ctxt.getCount() == 13) && symb == '+')
    {
        LabstrState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addsymbbuf(symb);
            ctxt.setCount(1);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else if (ctxt.getCount() == 12 && symb == ',')

    {
        LabstrState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.addnum();
            ctxt.setCount(13);
            ctxt.cleanbuf();
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Unacceptable);
        context.getState().Entry(context);
    }

}

void Map1_Parsing::SpaceOrTab(labstrContext& context)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.smsfor() && ctxt.getCount() == 12)
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.addnum();
            ctxt.setCount(0);
            context.setState(Map1::Message);
        }
        catch (...)
        {
            context.setState(Map1::Message);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Unacceptable);
        context.getState().Entry(context);
    }

}

void Map1_Parsing::Unknown(labstrContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Unacceptable);
    context.getState().Entry(context);

}

void Map1_Message::Digit(labstrContext& context, char pdigit)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.getCount() < 64)
    {
        LabstrState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.setCount(ctxt.getCount() + 1);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Unacceptable);
        context.getState().Entry(context);
    }

}

void Map1_Message::EOS(labstrContext& context)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.getCount() > 0 && ctxt.getCount() <= 64)
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Acceptable();
            ctxt.cleanbuf();
            ctxt.setsmsflagzero();
            ctxt.setCount(0);
            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }
    else
    {
        context.getState().Exit(context);
        context.clearState();
        try
        {
            ctxt.Unacceptable();
            ctxt.cleanbuf();
            ctxt.setsmsflagzero();
            ctxt.setCount(0);
            context.setState(Map1::Start);
        }
        catch (...)
        {
            context.setState(Map1::Start);
            throw;
        }
        context.getState().Entry(context);
    }

}

void Map1_Message::Letter(labstrContext& context, char symb)
{
    Labstr& ctxt = context.getOwner();

    if (ctxt.getCount() < 64)
    {
        LabstrState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.setCount(ctxt.getCount() + 1);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Unacceptable);
        context.getState().Entry(context);
    }

}

void Map1_Message::PunctMark(labstrContext& context, char symb)
{
    Labstr& ctxt = context.getOwner();

    if ((ctxt.getCount() < 64) &&( symb == '%' || symb == '.' || symb == ',' || symb == '!' || symb == '?'))
    {
        LabstrState& endState = context.getState();

        context.clearState();
        try
        {
            ctxt.setCount(ctxt.getCount() + 1);
            context.setState(endState);
        }
        catch (...)
        {
            context.setState(endState);
            throw;
        }
    }
    else
    {
        context.getState().Exit(context);
        context.setState(Map1::Unacceptable);
        context.getState().Entry(context);
    }

}

void Map1_Message::SpaceOrTab(labstrContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Unacceptable);
    context.getState().Entry(context);

}

void Map1_Message::Unknown(labstrContext& context)
{

    context.getState().Exit(context);
    context.setState(Map1::Unacceptable);
    context.getState().Entry(context);

}

void Map1_Unacceptable::Digit(labstrContext& context, char pdigit)
{


}

void Map1_Unacceptable::EOS(labstrContext& context)
{
    Labstr& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.Unacceptable();
        ctxt.cleanbuf();
        ctxt.setsmsflagzero();
        ctxt.setCount(0);
        context.setState(Map1::Start);
    }
    catch (...)
    {
        context.setState(Map1::Start);
        throw;
    }
    context.getState().Entry(context);

}

void Map1_Unacceptable::Letter(labstrContext& context, char symb)
{


}

void Map1_Unacceptable::PunctMark(labstrContext& context, char symb)
{


}

void Map1_Unacceptable::SpaceOrTab(labstrContext& context)
{


}

void Map1_Unacceptable::Unknown(labstrContext& context)
{


}

//
// Local variables:
//  buffer-read-only: t
// End:
//
